import os
import logging
from telethon import TelegramClient, events, Button
from telethon.tl.functions.channels import GetParticipantRequest, GetFullChannelRequest, GetParticipantsRequest
from telethon.tl.functions.messages import ExportChatInviteRequest
from telethon.tl.types import ChannelParticipantCreator, ChannelParticipantAdmin, ChannelParticipantsSearch
from telethon.errors import UserIsBlockedError
from telethon.errors.rpcerrorlist import UserNotParticipantError, ButtonUrlInvalidError
from pymongo import MongoClient
import asyncio

# Logging configuration
logging.basicConfig(level=logging.INFO, format="%(asctime)s - %(levelname)s - %(message)s")
logger = logging.getLogger("DURGESH")

# Environment variables with default values
BOT_TOKEN = os.getenv("BOT_TOKEN", None)
MONGO_URI = os.getenv("MONGO_URL", None)
OWNER_ID = int(os.getenv("OWNER_ID", "0"))
LOGGER_ID = int(os.getenv("LOGGER_ID", "0"))
API_ID = int(os.getenv("API_ID", "0"))
API_HASH = os.getenv("API_HASH", None)
FSUB = os.getenv("FSUB", "").strip()

# MongoDB connection
fsubdb = MongoClient(MONGO_URI)
forcesub_collection = fsubdb.status_db.status
banned_users_collection = fsubdb.status_db.banned_users

# Telegram client
app = TelegramClient('bot', api_id=API_ID, api_hash=API_HASH)

# Parse force sub channels/groups
FSUB_IDS = []
if FSUB:
    try:
        fsub_list = FSUB.split()
        if len(fsub_list) > 4:
            logger.warning("Maximum 4 force subscription channels allowed. Using first 4.")
            fsub_list = fsub_list[:4]
        FSUB_IDS = [int(x) for x in fsub_list]
    except:
        logger.error("Invalid FSUB format. Should be space-separated channel IDs.")

# Add new function to check owner's force sub
async def check_owner_fsub(user_id):
    if not FSUB_IDS or user_id == OWNER_ID:
        return True
        
    missing_subs = []
    for channel_id in FSUB_IDS:
        try:
            await app(GetParticipantRequest(channel=channel_id, participant=user_id))
        except UserNotParticipantError:
            try:
                channel = await app.get_entity(channel_id)
                missing_subs.append(channel)
            except:
                continue
    return missing_subs

@app.on(events.ChatAction)
async def handle_added_to_chat(event):
    if event.user_added and event.user_id == app.uid:
        chat = await event.get_chat()
        if chat.username:
            chat_link = f"https://t.me/{chat.username}"
        else:
            chat_link = "Private Group"
        await app.send_message(
            LOGGER_ID,
            f"**üîî  ô·¥è·¥õ ·¥Ä·¥Ö·¥Ö·¥á·¥Ö ·¥õ·¥è …¥·¥á·¥° ·¥Ñ ú·¥Ä·¥õ**\n\n"
            f"**·¥Ñ ú·¥Ä·¥õ …¥·¥Ä·¥ç·¥á:** {chat.title}\n"
            f"**·¥Ñ ú·¥Ä·¥õ …™·¥Ö:** `{chat.id}`\n"
            f"** ü…™…¥·¥ã:** {chat_link}"
        )

@app.on(events.NewMessage(pattern=r"^/start$", func=lambda e: e.is_private))
async def start(event):
    user = await event.get_sender()
    await app.send_message(
        LOGGER_ID,
        f"**üÜï …¥·¥á·¥° ·¥ús·¥á Ä s·¥õ·¥Ä Ä·¥õ·¥á·¥Ö ·¥õ ú·¥á  ô·¥è·¥õ**\n\n"
        f"**…¥·¥Ä·¥ç·¥á:** {user.first_name}\n"
        f"**·¥ús·¥á Ä…¥·¥Ä·¥ç·¥á:** @{user.username}\n"
        f"**·¥ús·¥á Ä …™·¥Ö:** `{user.id}`"
    )
    await event.reply(
        "**üëã  ú·¥á ü ü·¥è! ·¥°·¥á ü·¥Ñ·¥è·¥ç·¥á ·¥õ·¥è ·¥õ ú·¥á “ì·¥è Ä·¥Ñ·¥á s·¥ú ôs·¥Ñ Ä…™·¥ò·¥õ…™·¥è…¥  ô·¥è·¥õ.**\n\n"
        "**‚û≤ ·¥ús·¥á ·¥õ ú…™s  ô·¥è·¥õ ·¥õ·¥è ·¥á…¥“ì·¥è Ä·¥Ñ·¥á ·¥ús·¥á Äs ·¥õ·¥è ·¥ä·¥è…™…¥ ·¥Ñ ú·¥Ä…¥…¥·¥á üs ·¥è Ä …¢ Ä·¥è·¥ú·¥òs  ô·¥á“ì·¥è Ä·¥á ·¥õ ú·¥á è ·¥Ñ·¥Ä…¥ s·¥á…¥·¥Ö ·¥ç·¥áss·¥Ä…¢·¥ás …™…¥ ·¥Ä …¢ Ä·¥è·¥ú·¥ò.**\n\n"
        "**‚û≤ ·¥õ è·¥ò·¥á /help “ì·¥è Ä ·¥ç·¥è Ä·¥á …™…¥“ì·¥è Ä·¥ç·¥Ä·¥õ…™·¥è…¥.**"
    )

@app.on(events.NewMessage(pattern=r"^/help$", func=lambda e: e.is_private))
async def help(event):
    await event.reply(
        "**üìñ  ú·¥á ü·¥ò ·¥ç·¥á…¥·¥ú:**\n\n"
        "**/set <·¥Ñ ú·¥Ä…¥…¥·¥á ü ·¥ús·¥á Ä…¥·¥Ä·¥ç·¥á ·¥è Ä …™·¥Ö> (·¥ú·¥ò ·¥õ·¥è 4)** - ·¥õ·¥è s·¥á·¥õ “ì·¥è Ä·¥Ñ·¥á s·¥ú ôs·¥Ñ Ä…™·¥ò·¥õ…™·¥è…¥ “ì·¥è Ä ·¥Ä …¢ Ä·¥è·¥ú·¥ò.\n"
        "**/fsub** - ·¥õ·¥è ·¥ç·¥Ä…¥·¥Ä…¢·¥á “ì·¥è Ä·¥Ñ·¥á s·¥ú ôs·¥Ñ Ä…™·¥ò·¥õ…™·¥è…¥ (·¥è…¥/·¥è“ì“ì).\n"
        "**/start** - ·¥õ·¥è ·¥Ö…™s·¥ò ü·¥Ä è ·¥õ ú·¥á ·¥°·¥á ü·¥Ñ·¥è·¥ç·¥á ·¥ç·¥áss·¥Ä…¢·¥á.\n"
        "**/help** - ·¥õ·¥è ·¥Ö…™s·¥ò ü·¥Ä è ·¥õ ú·¥á  ú·¥á ü·¥ò ·¥ç·¥á…¥·¥ú.\n"
        "**/stats** - ·¥õ·¥è ·¥†…™·¥á·¥°  ô·¥è·¥õ s·¥õ·¥Ä·¥õ…™s·¥õ…™·¥Ñs.\n"
        "**/broadcast <·¥ç·¥áss·¥Ä…¢·¥á>** - ·¥õ·¥è  ô Ä·¥è·¥Ä·¥Ö·¥Ñ·¥Äs·¥õ ·¥Ä ·¥ç·¥áss·¥Ä…¢·¥á ·¥õ·¥è ·¥Ä ü ü ·¥ús·¥á Äs.\n"
        "**/ban <·¥ús·¥á Ä …™·¥Ö>** - ·¥õ·¥è  ô·¥Ä…¥ ·¥Ä ·¥ús·¥á Ä.\n"
        "**/unban <·¥ús·¥á Ä …™·¥Ö>** - ·¥õ·¥è ·¥ú…¥ ô·¥Ä…¥ ·¥Ä ·¥ús·¥á Ä.\n\n"
        "**‚û≤ ·¥õ ú·¥ás·¥á ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ös ·¥è…¥ ü è ·¥°·¥è Ä·¥ã …™…¥ …¢ Ä·¥è·¥ú·¥òs:**\n"
        "**/set** - ·¥õ·¥è s·¥á·¥õ “ì·¥è Ä·¥Ñ·¥á s·¥ú ôs·¥Ñ Ä…™·¥ò·¥õ…™·¥è…¥.\n"
        "**/fsub** - ·¥õ·¥è ·¥ç·¥Ä…¥·¥Ä…¢·¥á “ì·¥è Ä·¥Ñ·¥á s·¥ú ôs·¥Ñ Ä…™·¥ò·¥õ…™·¥è…¥.\n\n"
        "**‚û≤ ·¥è…¥ ü è …¢ Ä·¥è·¥ú·¥ò ·¥è·¥°…¥·¥á Äs ·¥è Ä ·¥õ ú·¥á  ô·¥è·¥õ ·¥è·¥°…¥·¥á Ä ·¥Ñ·¥Ä…¥ ·¥ús·¥á ·¥õ ú·¥ás·¥á ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ös.**"
    )

@app.on(events.NewMessage(pattern=r"^/set( .+)?$", func=lambda e: e.is_group))
async def set_forcesub(event):
    chat_id = event.chat_id
    user_id = event.sender_id

    member = await app(GetParticipantRequest(chat_id, user_id))
    if not (isinstance(member.participant, (ChannelParticipantCreator, ChannelParticipantAdmin)) or user_id == OWNER_ID):
        return await event.reply("**·¥è…¥ ü è …¢ Ä·¥è·¥ú·¥ò ·¥è·¥°…¥·¥á Äs ·¥è Ä ·¥õ ú·¥á  ô·¥è·¥õ ·¥è·¥°…¥·¥á Ä ·¥Ñ·¥Ä…¥ ·¥ús·¥á ·¥õ ú…™s ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ö.**")

    command = event.pattern_match.group(1)
    if not command:
        return await event.reply("**·¥ús·¥Ä…¢·¥á: /set <·¥Ñ ú·¥Ä…¥…¥·¥á ü ·¥ús·¥á Ä…¥·¥Ä·¥ç·¥á ·¥è Ä …™·¥Ö> (·¥ú·¥ò ·¥õ·¥è 4)**")

    channels = command.strip().split()
    if len(channels) > 4:
        return await event.reply("**üö´  è·¥è·¥ú ·¥Ñ·¥Ä…¥ ·¥è…¥ ü è ·¥Ä·¥Ö·¥Ö ·¥ú·¥ò ·¥õ·¥è 4 “ì·¥è Ä·¥Ñ·¥á s·¥ú ôs·¥Ñ Ä…™·¥ò·¥õ…™·¥è…¥s.**")

    fsub_data = []
    for channel_input in channels:
        try:
            channel_info = await app(GetFullChannelRequest(channel_input))
            channel_id = channel_info.full_chat.id
            channel_title = channel_info.chats[0].title
            if channel_info.chats[0].username:
                channel_username = f"@{channel_info.chats[0].username}"
                channel_link = f"https://t.me/{channel_info.chats[0].username}"
            else:
                invite = await app(ExportChatInviteRequest(channel_id))
                channel_username = invite.link
                channel_link = invite.link
            
            channel_members = await app(GetParticipantsRequest(
                channel=channel_id,
                filter=ChannelParticipantsSearch(''),
                offset=0,
                limit=1
            ))
            channel_members_count = channel_members.count
            
            fsub_data.append({"id": channel_id, "username": channel_username, "title": channel_title, "link": channel_link})
        except Exception as e:
            logger.error(f"Error fetching channel info for {channel_input}: {e}")
            return await event.reply(f"**üö´ “ì·¥Ä…™ ü·¥á·¥Ö ·¥õ·¥è “ì·¥á·¥õ·¥Ñ ú ·¥Ö·¥Ä·¥õ·¥Ä “ì·¥è Ä {channel_input}.**")

    forcesub_collection.update_one(
        {"chat_id": chat_id},
        {"$set": {"channels": fsub_data}},
        upsert=True
    )
    
    set_by_user = f"@{event.sender.username}" if event.sender.username else event.sender.first_name
    
    channel_list = "\n".join([f"**{c['title']}** ({c['username']})" for c in fsub_data])
    
    if len(fsub_data) == 1:
        channel_info = fsub_data[0]
        await event.reply(
            f"**üéâ “ì·¥è Ä·¥Ñ·¥á s·¥ú ôs·¥Ñ Ä…™·¥ò·¥õ…™·¥è…¥ s·¥á·¥õ ·¥õ·¥è** [{channel_info['title']}]({channel_info['username']}) **“ì·¥è Ä ·¥õ ú…™s …¢ Ä·¥è·¥ú·¥ò.**\n\n"
            f"**üÜî ·¥Ñ ú·¥Ä…¥…¥·¥á ü …™·¥Ö:** `{channel_info['id']}`\n"
            f"**üñáÔ∏è ·¥Ñ ú·¥Ä…¥…¥·¥á ü  ü…™…¥·¥ã:** […¢·¥á·¥õ  ü…™…¥·¥ã]({channel_info['link']})\n"
            f"**üë§ s·¥á·¥õ  ô è:** {set_by_user}"
        )
    else:
        await event.reply(f"**üéâ “ì·¥è Ä·¥Ñ·¥á s·¥ú ôs·¥Ñ Ä…™·¥ò·¥õ…™·¥è…¥ s·¥á·¥õ “ì·¥è Ä ·¥õ ú…™s …¢ Ä·¥è·¥ú·¥ò:**\n\n{channel_list}")

@app.on(events.NewMessage(pattern=r"^/fsub$", func=lambda e: e.is_group))
async def manage_forcesub(event):
    chat_id = event.chat_id
    user_id = event.sender_id

    member = await app(GetParticipantRequest(chat_id, user_id))
    if not (isinstance(member.participant, (ChannelParticipantCreator, ChannelParticipantAdmin)) or user_id == OWNER_ID):
        return await event.reply("**·¥è…¥ ü è …¢ Ä·¥è·¥ú·¥ò ·¥è·¥°…¥·¥á Äs ·¥è Ä ·¥õ ú·¥á  ô·¥è·¥õ ·¥è·¥°…¥·¥á Ä ·¥Ñ·¥Ä…¥ ·¥ús·¥á ·¥õ ú…™s ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ö.**")

    forcesub_data = forcesub_collection.find_one({"chat_id": chat_id})
    if not forcesub_data or not forcesub_data.get("channels"):
        return await event.reply("**üö´ …¥·¥è “ì·¥è Ä·¥Ñ·¥á s·¥ú ôs·¥Ñ Ä…™·¥ò·¥õ…™·¥è…¥ …™s s·¥á·¥õ “ì·¥è Ä ·¥õ ú…™s …¢ Ä·¥è·¥ú·¥ò.**")

    channel_list = "\n".join([f"**{c['title']}** ({c['username']})" for c in forcesub_data["channels"]])
    await event.reply(
        f"**üìä “ì·¥è Ä·¥Ñ·¥á s·¥ú ôs·¥Ñ Ä…™·¥ò·¥õ…™·¥è…¥ “ì·¥è Ä ·¥õ ú…™s …¢ Ä·¥è·¥ú·¥ò:**\n\n{channel_list}",
        buttons=[
            [Button.inline("ON", data=f"fsub_on_{chat_id}"), Button.inline("OFF", data=f"fsub_off_{chat_id}")]
        ]
    )

@app.on(events.CallbackQuery(pattern=r"fsub_(on|off)_(\d+)"))
async def toggle_forcesub(event):
    action, chat_id = event.pattern_match.group(1), int(event.pattern_match.group(2))

    if action == "on":
        await event.edit("**‚úÖ “ì·¥è Ä·¥Ñ·¥á s·¥ú ôs·¥Ñ Ä…™·¥ò·¥õ…™·¥è…¥  ú·¥Äs  ô·¥á·¥á…¥ ·¥á…¥·¥Ä ô ü·¥á·¥Ö.**")
    elif action == "off":
        forcesub_collection.delete_one({"chat_id": chat_id})
        await event.edit("**‚ùå “ì·¥è Ä·¥Ñ·¥á s·¥ú ôs·¥Ñ Ä…™·¥ò·¥õ…™·¥è…¥  ú·¥Äs  ô·¥á·¥á…¥ ·¥Ö…™s·¥Ä ô ü·¥á·¥Ö.**")

@app.on(events.NewMessage(func=lambda e: e.is_group))
async def enforce_forcesub(event):
    chat_id = event.chat_id
    user_id = event.sender_id

    forcesub_data = forcesub_collection.find_one({"chat_id": chat_id})
    if not forcesub_data or not forcesub_data.get("channels"):
        return

    is_member = True
    for channel in forcesub_data["channels"]:
        try:
            await app(GetParticipantRequest(channel["id"], user_id))
        except UserNotParticipantError:
            is_member = False
            break
        except Exception as e:
            if "Could not find the input entity" in str(e):
                logger.warning(f"Could not check user {user_id} in channel {channel['id']}: {e}")
                # We can't check this user, so we'll assume they are not a member.
                is_member = False
                break
            else:
                logger.error(f"An error occurred while checking user participation: {e}")
                return

    if not is_member:
        try:
            await event.delete()
        except:
            pass

        try:
            await event.reply(
                f"**üëã  ú·¥á ü ü·¥è {event.sender.first_name},**\n\n"
                f"** è·¥è·¥ú …¥·¥á·¥á·¥Ö ·¥õ·¥è ·¥ä·¥è…™…¥ ·¥õ ú·¥á “ì·¥è ü ü·¥è·¥°…™…¥…¢ ·¥Ñ ú·¥Ä…¥…¥·¥á ü(s) ·¥õ·¥è s·¥á…¥·¥Ö ·¥ç·¥áss·¥Ä…¢·¥ás …™…¥ ·¥õ ú…™s …¢ Ä·¥è·¥ú·¥ò:**\n\n"
                f"{chr(10).join([f'‡πè [{c['title']}]({c['username']})' for c in forcesub_data['channels']])}",
                buttons=[[Button.url(f"‡πè ·¥ä·¥è…™…¥ {c['title']} ‡πè", url=c['username']) for c in forcesub_data['channels']]]
            )
        except ButtonUrlInvalidError:
            logger.error(f"Button URL invalid for channel: {channel['username']}")
            await event.reply(
                f"**üëã  ú·¥á ü ü·¥è {event.sender.first_name},**\n\n"
                f"** è·¥è·¥ú …¥·¥á·¥á·¥Ö ·¥õ·¥è ·¥ä·¥è…™…¥ ·¥õ ú·¥á channel to send messages in this group.**\n"
                f"**Channel title:** {channel['title']}\n"
                f"**Channel username or link:** {channel['username']}"
            )
        except Exception as e:
            logger.error(f"An error occurred while sending the force sub message: {e}")
        return

@app.on(events.NewMessage(pattern=r"^/stats$", func=lambda e: e.is_private))
async def stats(event):
    if event.sender_id != OWNER_ID:
        return await event.reply("**üö´ ·¥è…¥ ü è ·¥õ ú·¥á  ô·¥è·¥õ ·¥è·¥°…¥·¥á Ä ·¥Ñ·¥Ä…¥ ·¥ús·¥á ·¥õ ú…™s ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ö.**")
    
    total_users = len(await app.get_dialogs())
    banned_users = banned_users_collection.count_documents({})
    await event.reply(f"**üìä  ô·¥è·¥õ s·¥õ·¥Ä·¥õ…™s·¥õ…™·¥Ñs:**\n\n**‚û≤ ·¥õ·¥è·¥õ·¥Ä ü ·¥ús·¥á Äs:** {total_users}\n**‚û≤  ô·¥Ä…¥…¥·¥á·¥Ö ·¥ús·¥á Äs:** {banned_users}")

@app.on(events.NewMessage(pattern=r"^/broadcast (.+)$", func=lambda e: e.is_private))
async def broadcast(event):
    if event.sender_id != OWNER_ID:
        return await event.reply("**üö´ ·¥è…¥ ü è ·¥õ ú·¥á  ô·¥è·¥õ ·¥è·¥°…¥·¥á Ä ·¥Ñ·¥Ä…¥ ·¥ús·¥á ·¥õ ú…™s ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ö.**")
    
    message = event.pattern_match.group(1)
    async for dialog in app.iter_dialogs():
        try:
            await app.send_message(dialog.id, message)
        except UserIsBlockedError:
            logger.warning(f"User {dialog.id} has blocked the bot.")
        except Exception as e:
            logger.error(f"Failed to send message to {dialog.id}: {e}")
    await event.reply("**‚úÖ  ô Ä·¥è·¥Ä·¥Ö·¥Ñ·¥Äs·¥õ ·¥Ñ·¥è·¥ç·¥ò ü·¥á·¥õ·¥á.**")

@app.on(events.NewMessage(pattern=r"^/ban (\d+)$", func=lambda e: e.is_private))
async def ban_user(event):
    if event.sender_id != OWNER_ID:
        return await event.reply("**üö´ ·¥è…¥ ü è ·¥õ ú·¥á  ô·¥è·¥õ ·¥è·¥°…¥·¥á Ä ·¥Ñ·¥Ä…¥ ·¥ús·¥á ·¥õ ú…™s ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ö.**")
    
    user_id = int(event.pattern_match.group(1))
    banned_users_collection.insert_one({"user_id": user_id})
    await event.reply(f"**‚úÖ ·¥ús·¥á Ä {user_id}  ú·¥Äs  ô·¥á·¥á…¥  ô·¥Ä…¥…¥·¥á·¥Ö.**")

@app.on(events.NewMessage(pattern=r"^/unban (\d+)$", func=lambda e: e.is_private))
async def unban_user(event):
    if event.sender_id != OWNER_ID:
        return await event.reply("**üö´ ·¥è…¥ ü è ·¥õ ú·¥á  ô·¥è·¥õ ·¥è·¥°…¥·¥á Ä ·¥Ñ·¥Ä…¥ ·¥ús·¥á ·¥õ ú…™s ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ö.**")
    
    user_id = int(event.pattern_match.group(1))
    banned_users_collection.delete_one({"user_id": user_id})
    await event.reply(f"**‚úÖ ·¥ús·¥á Ä {user_id}  ú·¥Äs  ô·¥á·¥á…¥ ·¥ú…¥ ô·¥Ä…¥…¥·¥á·¥Ö.**")

@app.on(events.NewMessage(func=lambda e: e.is_private))
async def check_ban(event):
    if banned_users_collection.find_one({"user_id": event.sender_id}):
        return await event.reply("**üö´  è·¥è·¥ú ·¥Ä Ä·¥á  ô·¥Ä…¥…¥·¥á·¥Ö “ì Ä·¥è·¥ç ·¥ús…™…¥…¢ ·¥õ ú…™s  ô·¥è·¥õ.**")

@app.on(events.NewMessage)
async def check_fsub_handler(event):
    if event.is_private:
        user_id = event.sender_id
        missing_subs = await check_owner_fsub(user_id)

        if missing_subs is True:
            return

        if missing_subs:
            buttons = []
            for channel in missing_subs:
                if hasattr(channel, 'username') and channel.username:
                    buttons.append([Button.url(f"Join {channel.title}", f"https://t.me/{channel.username}")])
                else:
                    try:
                        invite = await app(ExportChatInviteRequest(channel.id))
                        buttons.append([Button.url(f"Join {channel.title}", invite.link)])
                    except:
                        continue

            await event.reply(
                "**‚ö†Ô∏è ·¥Ä·¥Ñ·¥Ñ·¥áss  Ä·¥ás·¥õ Ä…™·¥Ñ·¥õ·¥á·¥Ö ‚ö†Ô∏è**\n\n"
                "** è·¥è·¥ú ·¥ç·¥ús·¥õ ·¥ä·¥è…™…¥ ·¥è·¥ú Ä ·¥Ñ ú·¥Ä…¥…¥·¥á ü(s) ·¥õ·¥è ·¥ús·¥á ·¥õ ú·¥á  ô·¥è·¥õ!**\n"
                "**·¥Ñ ü…™·¥Ñ·¥ã ·¥õ ú·¥á  ô·¥ú·¥õ·¥õ·¥è…¥s  ô·¥á ü·¥è·¥° ·¥õ·¥è ·¥ä·¥è…™…¥**\n"
                "**·¥õ ú·¥á…¥ ·¥õ Ä è ·¥Ä…¢·¥Ä…™…¥!**",
                buttons=buttons
            )
            return True
    return False

async def startup_notification():
    try:
        await app.send_message(
            LOGGER_ID,
            "**‚úÖ  ô·¥è·¥õ  ú·¥Äs s·¥õ·¥Ä Ä·¥õ·¥á·¥Ö s·¥ú·¥Ñ·¥Ñ·¥áss“ì·¥ú ü ü è!**\n\n"
            f"** ô·¥è·¥õ …™…¥“ì·¥è:**\n"
            f"**‚û≤ ·¥è·¥°…¥·¥á Ä …™·¥Ö:** `{OWNER_ID}`\n"
            f"**‚û≤  ü·¥è…¢…¢·¥á Ä …™·¥Ö:** `{LOGGER_ID}`"
        )
    except Exception as e:
        logger.error(f"Error sending startup notification: {e}")

async def main():
    await app.start(bot_token=BOT_TOKEN)
    await startup_notification()
    logger.info("Bot is running.")
    await app.run_until_disconnected()

if __name__ == "__main__":
    logger.info("Starting the bot...")
    try:
        asyncio.run(main())
    except (KeyboardInterrupt, SystemExit):
        logger.info("Bot stopped manually.")
    except Exception as e:
        logger.error(f"An unexpected error occurred: {e}")
