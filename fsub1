import os, logging, asyncio  # chat gpt
from motor.motor_asyncio import AsyncIOMotorClient
from telethon import TelegramClient, events, Button
from telethon.tl.functions.channels import GetParticipantRequest, GetFullChannelRequest
from telethon.tl.functions.messages import ExportChatInviteRequest
from telethon.errors.rpcerrorlist import UserNotParticipantError
from telethon.errors import ChatAdminRequiredError

# Logging configuration
logging.basicConfig(level=logging.INFO, format="%(asctime)s - %(levelname)s - %(message)s")
logger = logging.getLogger("DURGESH")

# Environment variables
BOT_TOKEN = os.getenv("BOT_TOKEN", None)
MONGO_URI = os.getenv("MONGO_URL", None)
OWNER_ID = int(os.getenv("OWNER_ID", "0"))
LOGGER_ID = int(os.getenv("LOGGER_ID", "0"))
API_ID = int(os.getenv("API_ID", "0"))
API_HASH = os.getenv("API_HASH", None)
FSUB = os.getenv("FSUB", "").strip()

# Telegram client
app = TelegramClient('bot', api_id=API_ID, api_hash=API_HASH)

# MongoDB connection
mongo_client = AsyncIOMotorClient(MONGO_URI)
db = mongo_client.fsub
users_collection = db["users"]
groups_collection = db["groups"]
forcesub_collection = db["forcesubs"]
banned_users_collection = db["banned_users"]

# Database functions
async def add_user(user_id):
    if not await users_collection.find_one({"user_id": user_id}):
        await users_collection.insert_one({"user_id": user_id})

async def add_group(group_id):
    if not await groups_collection.find_one({"group_id": group_id}):
        await groups_collection.insert_one({"group_id": group_id})

async def remove_group(group_id):
    if await groups_collection.find_one({"group_id": group_id}):
        await groups_collection.delete_one({"group_id": group_id})

async def get_all_users():
    users = []
    cursor = users_collection.find()
    async for user in cursor:
        try:
            users.append(user["user_id"])
        except Exception:
            pass
    return users

async def get_all_groups():
    groups = []
    cursor = groups_collection.find()
    async for chat in cursor:
        try:
            groups.append(chat["group_id"])
        except Exception:
            pass
    return groups

# Parse force sub channels/groups
FSUB_IDS = []
if FSUB:
    try:
        fsub_list = FSUB.split()
        if len(fsub_list) > 4:
            logger.warning("Maximum 4 force subscription channels allowed. Using first 4.")
            fsub_list = fsub_list[:4]
        FSUB_IDS = [int(x) if x.isdigit() or (x.startswith('-') and x[1:].isdigit()) else x for x in fsub_list]
    except Exception as e:
        logger.error("Invalid FSUB format. Should be space-separated channel IDs or usernames.")

# Function to check owner's force subscription
async def check_owner_fsub(user_id):
    if not FSUB_IDS or user_id == OWNER_ID:
        return True

    missing_subs = []
    for channel_id in FSUB_IDS:
        try:
            if isinstance(channel_id, int):
                await app(GetParticipantRequest(channel=channel_id, participant=user_id))
            else:
                channel_entity = await app.get_entity(channel_id)
                await app(GetParticipantRequest(channel=channel_entity, participant=user_id))
        except UserNotParticipantError:
            try:
                if isinstance(channel_id, int):
                    channel = await app.get_entity(channel_id)
                else:
                    channel = await app.get_entity(channel_id)
                missing_subs.append(channel)
            except Exception as e:
                logger.error(f"Error getting channel {channel_id}: {e}")
                continue
        except Exception as e:
            logger.error(f"Error checking user in channel {channel_id}: {e}")
    return True if not missing_subs else missing_subs

# Decorator to check force subscription compliance
def check_fsub(func):
    async def wrapper(event):
        user_id = event.sender_id
        
        # Check for bot commands starting with '/'
        if event.text and event.text.startswith('/'):
            missing_owner_subs = await check_owner_fsub(user_id)
            if missing_owner_subs is not True:
                buttons = []
                for channel in missing_owner_subs:
                    if hasattr(channel, 'username') and channel.username:
                        buttons.append([Button.url(f"Join {channel.title}", f"https://t.me/{channel.username}")])
                    else:
                        try:
                            invite = await app(ExportChatInviteRequest(channel))
                            buttons.append([Button.url(f"Join {channel.title}", invite.link)])
                        except Exception as e:
                            logger.error(f"Error creating invite for {channel.id}: {e}")
                            continue
                await event.reply(
                    "**‚ö†Ô∏è ·¥Ä·¥Ñ·¥Ñ·¥áss  Ä·¥ás·¥õ Ä…™·¥Ñ·¥õ·¥á·¥Ö ‚ö†Ô∏è**\n\n"
                    "** è·¥è·¥ú ·¥ç·¥ús·¥õ ·¥ä·¥è…™…¥ ·¥è·¥ú Ä ·¥Ñ ú·¥Ä…¥…¥·¥á ü(s) ·¥õ·¥è ·¥ús·¥á ·¥õ ú·¥á  ô·¥è·¥õ!**\n"
                    "**·¥Ñ ü…™·¥Ñ·¥ã ·¥õ ú·¥á  ô·¥ú·¥õ·¥õ·¥è…¥s  ô·¥á ü·¥è·¥° ·¥õ·¥è ·¥ä·¥è…™…¥**\n"
                    "**·¥õ ú·¥á…¥ ·¥õ Ä è ·¥Ä…¢·¥Ä…™…¥!**",
                    buttons=buttons
                )
                return
        return await func(event)
    return wrapper

# Add this function near the top with other utility functions
async def is_command_for_me(event):
    """Check if command is meant for this bot"""
    try:
        # Get bot's username
        me = await app.get_me()
        bot_username = me.username
        
        # Extract command and target bot from message
        parts = event.text.split('@', 1)
        if len(parts) > 1:
            target_bot = parts[1].strip().lower()
            return target_bot == bot_username.lower()
        return True  # No bot username specified, respond to command
    except Exception as e:
        logger.error(f"Error checking command target: {e}")
        return True

@app.on(events.ChatAction)
async def handle_added_to_chat(event):
    # Debugging: Print available attributes of the event object
    print(dir(event))  # This will help identify the correct attribute

    # Replace 'user_removed' with the correct attribute
    if hasattr(event, 'user_left') and event.user_left:
        me = await app.get_me()
        if event.user_id == me.id:
            await remove_group(event.chat_id)  # Remove group when bot is removed

    if event.user_added:
        me = await app.get_me()
        if event.user_id == me.id:
            chat = await event.get_chat()
            await add_group(chat.id)  # Add group to the database
            if chat.username:
                chat_link = f"https://t.me/{chat.username}"
            else:
                chat_link = "Private Group"
            await app.send_message(
                LOGGER_ID,
                f"**üîî  ô·¥è·¥õ ·¥Ä·¥Ö·¥Ö·¥á·¥Ö ·¥õ·¥è …¥·¥á·¥° ·¥Ñ ú·¥Ä·¥õ**\n\n"
                f"**·¥Ñ ú·¥Ä·¥õ …¥·¥Ä·¥ç·¥á:** {chat.title}\n"
                f"**·¥Ñ ú·¥Ä·¥õ …™·¥Ö:** `{chat.id}`\n"
                f"** ü…™…¥·¥ã:** {chat_link}"
            )

# Update start command pattern to include optional bot username
@app.on(events.NewMessage(pattern=r"^/start(?:@\w+)?$"))
@check_fsub
async def start(event):
    if not await is_command_for_me(event):
        return
    user_id = event.sender_id
    await add_user(user_id)  # Add user to the database
    user = await event.get_sender()
    user_id = user.id

    await app.send_message(
        LOGGER_ID,
        f"**üÜï …¥·¥á·¥° ·¥ús·¥á Ä s·¥õ·¥Ä Ä·¥õ·¥á·¥Ö ·¥õ ú·¥á  ô·¥è·¥õ**\n\n"
        f"**…¥·¥Ä·¥ç·¥á:** {user.first_name}\n"
        f"**·¥ús·¥á Ä…¥·¥Ä·¥ç·¥á:** @{user.username}\n"
        f"**·¥ús·¥á Ä …™·¥Ö:** `{user.id}`"
    )
    await event.reply(
        "**üëã  ú·¥á ü ü·¥è! ·¥°·¥á ü·¥Ñ·¥è·¥ç·¥á ·¥õ·¥è ·¥õ ú·¥á “ì·¥è Ä·¥Ñ·¥á s·¥ú ôs·¥Ñ Ä…™·¥ò·¥õ…™·¥è…¥  ô·¥è·¥õ.**\n\n"
        "**‚û≤ ·¥ús·¥á ·¥õ ú…™s  ô·¥è·¥õ ·¥õ·¥è ·¥á…¥“ì·¥è Ä·¥Ñ·¥á ·¥ús·¥á Äs ·¥õ·¥è ·¥ä·¥è…™…¥ ·¥Ñ ú·¥Ä…¥…¥·¥á üs ·¥è Ä …¢ Ä·¥è·¥ú·¥òs  ô·¥á“ì·¥è Ä·¥á ·¥õ ú·¥á è ·¥Ñ·¥Ä…¥ s·¥á…¥·¥Ö ·¥ç·¥áss·¥Ä…¢·¥ás …™…¥ ·¥Ä …¢ Ä·¥è·¥ú·¥ò.**\n\n"
        "**‚û≤ ·¥õ è·¥ò·¥á /help “ì·¥è Ä ·¥ç·¥è Ä·¥á …™…¥“ì·¥è Ä·¥ç·¥Ä·¥õ…™·¥è…¥.**"
    )

# Update help command pattern to include optional bot username
@app.on(events.NewMessage(pattern=r"^/help(?:@\w+)?$"))
@check_fsub
async def help(event):
    if not await is_command_for_me(event):
        return
    user_id = event.sender_id
    await event.reply(
        "**üìñ  ú·¥á ü·¥ò ·¥ç·¥á…¥·¥ú:**\n\n"
        "**/set <·¥Ñ ú·¥Ä…¥…¥·¥á ü ·¥ús·¥á Ä…¥·¥Ä·¥ç·¥á ·¥è Ä …™·¥Ö ·¥è Ä  ü…™…¥·¥ã> (·¥ú·¥ò ·¥õ·¥è 4)** - ·¥õ·¥è s·¥á·¥õ “ì·¥è Ä·¥Ñ·¥á s·¥ú ôs·¥Ñ Ä…™·¥ò·¥õ…™·¥è…¥ “ì·¥è Ä ·¥Ä …¢ Ä·¥è·¥ú·¥ò.\n"
        "**/fsub** - ·¥õ·¥è ·¥ç·¥Ä…¥·¥Ä…¢·¥á “ì·¥è Ä·¥Ñ·¥á s·¥ú ôs·¥Ñ Ä…™·¥ò·¥õ…™·¥è…¥ (·¥è…¥/·¥è“ì“ì).\n"
        "**/reset** - ·¥õ·¥è  Ä·¥ás·¥á·¥õ “ì·¥è Ä·¥Ñ·¥á s·¥ú ôs·¥Ñ Ä…™·¥ò·¥õ…™·¥è…¥ ·¥Ä…¥·¥Ö  Ä·¥á·¥ç·¥è·¥†·¥á ·¥Ä ü ü ·¥Ñ ú·¥Ä…¥…¥·¥á üs.\n"
        "**/start** - ·¥õ·¥è ·¥Ö…™s·¥ò ü·¥Ä è ·¥õ ú·¥á ·¥°·¥á ü·¥Ñ·¥è·¥ç·¥á ·¥ç·¥áss·¥Ä…¢·¥á.\n"
        "**/help** - ·¥õ·¥è ·¥Ö…™s·¥ò ü·¥Ä è ·¥õ ú·¥á  ú·¥á ü·¥ò ·¥ç·¥á…¥·¥ú.\n"
        "**/stats** - ·¥õ·¥è ·¥†…™·¥á·¥°  ô·¥è·¥õ s·¥õ·¥Ä·¥õ…™s·¥õ…™·¥Ñs.\n"
        "**/broadcast <·¥ç·¥áss·¥Ä…¢·¥á>** - ·¥õ·¥è  ô Ä·¥è·¥Ä·¥Ö·¥Ñ·¥Äs·¥õ ·¥Ä ·¥ç·¥áss·¥Ä…¢·¥á ·¥õ·¥è ·¥Ä ü ü ·¥ús·¥á Äs.\n"
        "**/ban <·¥ús·¥á Ä …™·¥Ö>** - ·¥õ·¥è  ô·¥Ä…¥ ·¥Ä ·¥ús·¥á Ä.\n"
        "**/unban <·¥ús·¥á Ä …™·¥Ö>** - ·¥õ·¥è ·¥ú…¥ ô·¥Ä…¥ ·¥Ä ·¥ús·¥á Ä.\n\n"
        "**‚û≤ ·¥õ ú·¥ás·¥á ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ös ·¥è…¥ ü è ·¥°·¥è Ä·¥ã …™…¥ …¢ Ä·¥è·¥ú·¥òs:**\n"
        "**/set** - ·¥õ·¥è s·¥á·¥õ “ì·¥è Ä·¥Ñ·¥á s·¥ú ôs·¥Ñ Ä…™·¥ò·¥õ…™·¥è…¥.\n"
        "**/fsub** - ·¥õ·¥è ·¥ç·¥Ä…¥·¥Ä…¢·¥á “ì·¥è Ä·¥Ñ·¥á s·¥ú ôs·¥Ñ Ä…™·¥ò·¥õ…™·¥è…¥.\n"
        "**/reset** - ·¥õ·¥è  Ä·¥ás·¥á·¥õ “ì·¥è Ä·¥Ñ·¥á s·¥ú ôs·¥Ñ Ä…™·¥ò·¥õ…™·¥è…¥.\n\n"
        "**‚û≤ ·¥è…¥ ü è …¢ Ä·¥è·¥ú·¥ò ·¥è·¥°…¥·¥á Äs, ·¥Ä·¥Ö·¥ç…™…¥s ·¥è Ä ·¥õ ú·¥á  ô·¥è·¥õ ·¥è·¥°…¥·¥á Ä ·¥Ñ·¥Ä…¥ ·¥ús·¥á ·¥õ ú·¥ás·¥á ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ös.**"
    )

async def is_admin_or_owner(chat_id, user_id):
    try:
        member = await app.get_permissions(chat_id, user_id)
        return member.is_admin or member.is_creator or user_id == OWNER_ID
    except ChatAdminRequiredError:
        return False
    except Exception as e:
        logger.error(f"Error checking admin status: {e}")
        return False

# Handler: /set command for setting force subscription
@app.on(events.NewMessage(pattern=r"^/set(?:@\w+)?( .+)?$", func=lambda e: e.is_group))
@check_fsub
async def set_forcesub(event):
    if not await is_command_for_me(event):
        return
    chat_id = event.chat_id
    user_id = event.sender_id

    # Check if user is admin or owner
    async def is_admin_or_owner(chat_id, user_id):
        try:
            member = await app.get_permissions(chat_id, user_id)
            return member.is_admin or member.is_creator or user_id == OWNER_ID
        except ChatAdminRequiredError:
            return False
        except Exception as e:
            logger.error(f"Error checking admin status: {e}")
            return False

    if not await is_admin_or_owner(chat_id, user_id):
        return await event.reply("**·¥è…¥ ü è …¢ Ä·¥è·¥ú·¥ò ·¥è·¥°…¥·¥á Äs, ·¥Ä·¥Ö·¥ç…™…¥s ·¥è Ä ·¥õ ú·¥á  ô·¥è·¥õ ·¥è·¥°…¥·¥á Ä ·¥Ñ·¥Ä…¥ ·¥ús·¥á ·¥õ ú…™s ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ö.**")

    await add_group(chat_id)  # Add group to database

    command = event.pattern_match.group(1)
    if not command:
        return await event.reply("**·¥ús·¥Ä…¢·¥á: /set <·¥Ñ ú·¥Ä…¥…¥·¥á ü ·¥ús·¥á Ä…¥·¥Ä·¥ç·¥á ·¥è Ä …™·¥Ö ·¥è Ä  ü…™…¥·¥ã> (·¥ú·¥ò ·¥õ·¥è 4)**")

    channels = command.strip().split()
    if len(channels) > 4:
        return await event.reply("**üö´  è·¥è·¥ú ·¥Ñ·¥Ä…¥ ·¥è…¥ ü è ·¥Ä·¥Ö·¥Ö ·¥ú·¥ò ·¥õ·¥è 4 “ì·¥è Ä·¥Ñ·¥á s·¥ú ôs·¥Ñ Ä…™·¥ò·¥õ…™·¥è…¥s.**")

    fsub_data = []
    for channel_input in channels:
        try:
            if channel_input.startswith("https://t.me/"):
                channel_input = channel_input.replace("https://t.me/", "")

            # Get entity by integer ID or username
            try:
                channel_id = int(channel_input)
                channel_entity = await app.get_entity(channel_id)
            except ValueError:
                channel_entity = await app.get_entity(channel_input)
                channel_id = channel_entity.id

            channel_info = await app(GetFullChannelRequest(channel_entity))
            channel_title = channel_info.chats[0].title

            if channel_info.chats[0].username:
                channel_username = f"@{channel_info.chats[0].username}"
                channel_link = f"https://t.me/{channel_info.chats[0].username}"
            else:
                invite = await app(ExportChatInviteRequest(channel_id))
                channel_username = invite.link
                channel_link = invite.link

            fsub_data.append({
                "id": channel_id,
                "username": channel_username,
                "title": channel_title,
                "link": channel_link
            })
        except Exception as e:
            logger.error(f"Error fetching channel info for {channel_input}: {e}")
            return await event.reply(f"**üö´ “ì·¥Ä…™ ü·¥á·¥Ö ·¥õ·¥è “ì·¥á·¥õ·¥Ñ ú ·¥Ö·¥Ä·¥õ·¥Ä “ì·¥è Ä {channel_input}.**")

    await forcesub_collection.update_one(
        {"chat_id": chat_id},
        {"$set": {"channels": fsub_data, "enabled": True}},
        upsert=True
    )

    set_by_user = f"@{event.sender.username}" if event.sender.username else event.sender.first_name
    channel_list = "\n".join([f"**{c['title']}** ({c['username']})" for c in fsub_data])

    if len(fsub_data) == 1:
        channel_info = fsub_data[0]
        await event.reply(
            f"**üéâ “ì·¥è Ä·¥Ñ·¥á s·¥ú ôs·¥Ñ Ä…™·¥ò·¥õ…™·¥è…¥ s·¥á·¥õ ·¥õ·¥è** [{channel_info['title']}]({channel_info['username']}) **“ì·¥è Ä ·¥õ ú…™s …¢ Ä·¥è·¥ú·¥ò.**\n\n"
            f"**üÜî ·¥Ñ ú·¥Ä…¥…¥·¥á ü …™·¥Ö:** `{channel_info['id']}`\n"
            f"**üñáÔ∏è ·¥Ñ ú·¥Ä…¥…¥·¥á ü  ü…™…¥·¥ã:** […¢·¥á·¥õ  ü…™…¥·¥ã]({channel_info['link']})\n"
            f"**üë§ s·¥á·¥õ  ô è:** {set_by_user}"
        )
    else:
        await event.reply(f"**üéâ “ì·¥è Ä·¥Ñ·¥á s·¥ú ôs·¥Ñ Ä…™·¥ò·¥õ…™·¥è…¥ s·¥á·¥õ “ì·¥è Ä ·¥õ ú…™s …¢ Ä·¥è·¥ú·¥ò:**\n\n{channel_list}")

# Handler: /fsub command to manage force subscription
@app.on(events.NewMessage(pattern=r"^/fsub(?:@\w+)?$", func=lambda e: e.is_group))
@check_fsub
async def manage_forcesub(event):
    if not await is_command_for_me(event):
        return
    try:
        chat_id = event.chat_id
        user_id = event.sender_id

        async def is_admin_or_owner(chat_id, user_id):
            try:
                member = await app.get_permissions(chat_id, user_id)
                return member.is_admin or member.is_creator or user_id == OWNER_ID
            except ChatAdminRequiredError:
                return False
            except Exception as e:
                logger.error(f"Error checking admin status: {e}")
                return False

        if not await is_admin_or_owner(chat_id, user_id):
            return await event.reply("**·¥è…¥ ü è …¢ Ä·¥è·¥ú·¥ò ·¥è·¥°…¥·¥á Äs, ·¥Ä·¥Ö·¥ç…™…¥s ·¥è Ä ·¥õ ú·¥á  ô·¥è·¥õ ·¥è·¥°…¥·¥á Ä ·¥Ñ·¥Ä…¥ ·¥ús·¥á ·¥õ ú…™s ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ö.**")

        forcesub_data = await forcesub_collection.find_one({"chat_id": chat_id})
        if not forcesub_data or not forcesub_data.get("channels") or not forcesub_data.get("enabled", True):
            return await event.reply("**üö´ …¥·¥è “ì·¥è Ä·¥Ñ·¥á s·¥ú ôs·¥Ñ Ä…™·¥ò·¥õ…™·¥è…¥ …™s s·¥á·¥õ “ì·¥è Ä ·¥õ ú…™s …¢ Ä·¥è·¥ú·¥ò.**")

        channel_list = "\n".join([f"**{c['title']}** ({c['username']})" for c in forcesub_data["channels"]])
        is_enabled = forcesub_data.get("enabled", True)
        
        # Create unique callback data
        callback_data = f"fsub_toggle_{chat_id}_{1 if not is_enabled else 0}"
        
        buttons = [[Button.inline(
            "üî¥ ·¥õ·¥ú Ä…¥ ·¥è“ì“ì" if is_enabled else "üü¢ ·¥õ·¥ú Ä…¥ ·¥è…¥", 
            callback_data
        )]]

        await event.reply(
            f"**üìä “ì·¥è Ä·¥Ñ·¥á s·¥ú ôs·¥Ñ Ä…™·¥ò·¥õ…™·¥è…¥ “ì·¥è Ä ·¥õ ú…™s …¢ Ä·¥è·¥ú·¥ò:**\n\n"
            f"{channel_list}\n\n"
            f"**·¥Ñ·¥ú Ä Ä·¥á…¥·¥õ s·¥õ·¥Ä·¥õ·¥ús:** {'üü¢ ·¥è…¥' if is_enabled else 'üî¥ ·¥è“ì“ì'}",
            buttons=buttons
        )
    except Exception as e:
        logger.error(f"Error in manage_forcesub: {str(e)}")
        await event.reply("**‚ùå An error occurred while processing the command.**")

# Handler: Callback query for toggling force subscription status
@app.on(events.CallbackQuery(pattern=r"fsub_toggle_(\-?\d+)_([01])"))
async def toggle_forcesub(event):
    try:
        chat_id = int(event.pattern_match.group(1))
        new_state = bool(int(event.pattern_match.group(2)))
        user_id = event.sender_id
        
        logger.info(f"Toggle callback received: chat_id={chat_id}, new_state={new_state}, user_id={user_id}")

        async def is_admin_or_owner(chat_id, user_id):
            try:
                member = await app.get_permissions(chat_id, user_id)
                return member.is_admin or member.is_creator or user_id == OWNER_ID
            except ChatAdminRequiredError:
                return False
            except Exception as e:
                logger.error(f"Error checking admin status: {e}")
                return False

        if not await is_admin_or_owner(chat_id, user_id):
            return await event.answer("**·¥è…¥ ü è …¢ Ä·¥è·¥ú·¥ò ·¥è·¥°…¥·¥á Äs, ·¥Ä·¥Ö·¥ç…™…¥s ·¥è Ä ·¥õ ú·¥á  ô·¥è·¥õ ·¥è·¥°…¥·¥á Ä ·¥Ñ·¥Ä…¥ ·¥ús·¥á ·¥õ ú…™s.**", alert=True)

        forcesub_data = await forcesub_collection.find_one({"chat_id": chat_id})
        if not forcesub_data:
            return await event.answer("**…¥·¥è “ì·¥è Ä·¥Ñ·¥á s·¥ú ôs·¥Ñ Ä…™·¥ò·¥õ…™·¥è…¥ …™s s·¥á·¥õ.**", alert=True)

        await forcesub_collection.update_one(
            {"chat_id": chat_id},
            {"$set": {"enabled": new_state}}
        )
        logger.info(f"Database updated for chat {chat_id}, new state: {new_state}")

        channel_list = "\n".join([f"**{c['title']}** ({c['username']})" for c in forcesub_data["channels"]])
        next_state = not new_state
        new_buttons = [[Button.inline(
            "üî¥ ·¥õ·¥ú Ä…¥ ·¥è“ì“ì" if new_state else "üü¢ ·¥õ·¥ú Ä…¥ ·¥è…¥",
            f"fsub_toggle_{chat_id}_{1 if next_state else 0}"
        )]]

        await event.edit(
            f"**üìä “ì·¥è Ä·¥Ñ·¥á s·¥ú ôs·¥Ñ Ä…™·¥ò·¥õ…™·¥è…¥ “ì·¥è Ä ·¥õ ú…™s …¢ Ä·¥è·¥ú·¥ò:**\n\n"
            f"{channel_list}\n\n"
            f"**·¥Ñ·¥ú Ä Ä·¥á…¥·¥õ s·¥õ·¥Ä·¥õ·¥ús:** {'üü¢ ·¥è…¥' if new_state else 'üî¥ ·¥è“ì“ì'}",
            buttons=new_buttons
        )
        
        await event.answer(
            f"**‚úÖ “ì·¥è Ä·¥Ñ·¥á s·¥ú ôs·¥Ñ Ä…™·¥ò·¥õ…™·¥è…¥ {new_state and 'enabled' or 'disabled'} s·¥ú·¥Ñ·¥Ñ·¥áss“ì·¥ú ü ü è!**",
            alert=True
        )
        logger.info(f"Toggle complete for chat {chat_id}, new state: {new_state}")
        
    except Exception as e:
        logger.error(f"Error in toggle_forcesub: {str(e)}")
        await event.answer("**‚ùå An error occurred while processing your request.**", alert=True)

# Handler: /reset command to remove force subscription from a group
@app.on(events.NewMessage(pattern=r"^/reset(?:@\w+)?$", func=lambda e: e.is_group))
@check_fsub
async def reset_forcesub(event):
    if not await is_command_for_me(event):
        return
    chat_id = event.chat_id
    user_id = event.sender_id

    async def is_admin_or_owner(chat_id, user_id):
        try:
            member = await app.get_permissions(chat_id, user_id)
            return member.is_admin or member.is_creator or user_id == OWNER_ID
        except ChatAdminRequiredError:
            return False
        except Exception as e:
            logger.error(f"Error checking admin status: {e}")
            return False

    if not await is_admin_or_owner(chat_id, user_id):
        return await event.reply("**·¥è…¥ ü è …¢ Ä·¥è·¥ú·¥ò ·¥è·¥°…¥·¥á Äs, ·¥Ä·¥Ö·¥ç…™…¥s ·¥è Ä ·¥õ ú·¥á  ô·¥è·¥õ ·¥è·¥°…¥·¥á Ä ·¥Ñ·¥Ä…¥ ·¥ús·¥á ·¥õ ú…™s ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ö.**")

    await remove_group(chat_id)
    await forcesub_collection.delete_one({"chat_id": chat_id})
    await event.reply("**‚úÖ “ì·¥è Ä·¥Ñ·¥á s·¥ú ôs·¥Ñ Ä…™·¥ò·¥õ…™·¥è…¥  ú·¥Äs  ô·¥á·¥á…¥  Ä·¥ás·¥á·¥õ “ì·¥è Ä ·¥õ ú…™s …¢ Ä·¥è·¥ú·¥ò.**")

# Handler: /stats command to show bot statistics
@app.on(events.NewMessage(pattern=r"^/stats(?:@\w+)?$"))
@check_fsub
async def stats(event):
    if not await is_command_for_me(event):
        return
    if event.sender_id != OWNER_ID:
        return await event.reply("**üö´ ·¥è…¥ ü è ·¥õ ú·¥á  ô·¥è·¥õ ·¥è·¥°…¥·¥á Ä ·¥Ñ·¥Ä…¥ ·¥ús·¥á ·¥õ ú…™s ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ö.**")

    total_users = len(await get_all_users())
    total_groups = len(await get_all_groups())
    banned_users = await banned_users_collection.count_documents({})
    await event.reply(
        f"**üìä  ô·¥è·¥õ s·¥õ·¥Ä·¥õ…™s·¥õ…™·¥Ñs:**\n\n"
        f"**‚û≤ ·¥õ·¥è·¥õ·¥Ä ü ·¥ús·¥á Äs:** {total_users}\n"
        f"**‚û≤ ·¥õ·¥è·¥õ·¥Ä ü …¢ Ä·¥è·¥ú·¥òs:** {total_groups}\n"
        f"**‚û≤  ô·¥Ä…¥…¥·¥á·¥Ö ·¥ús·¥á Äs:** {banned_users}"
    )

# Handler: /ban command to ban a user
@app.on(events.NewMessage(pattern=r"^/ban(?:@\w+)? (\d+)$"))
@check_fsub
async def ban_user(event):
    if not await is_command_for_me(event):
        return
    if event.sender_id != OWNER_ID:
        return await event.reply("**üö´ ·¥è…¥ ü è ·¥õ ú·¥á  ô·¥è·¥õ ·¥è·¥°…¥·¥á Ä ·¥Ñ·¥Ä…¥ ·¥ús·¥á ·¥õ ú…™s ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ö.**")
    user_id = int(event.pattern_match.group(1))
    await banned_users_collection.insert_one({"user_id": user_id})
    await event.reply(f"**‚úÖ ·¥ús·¥á Ä {user_id}  ú·¥Äs  ô·¥á·¥á…¥  ô·¥Ä…¥…¥·¥á·¥Ö.**")

# Handler: /unban command to unban a user
@app.on(events.NewMessage(pattern=r"^/unban(?:@\w+)? (\d+)$"))
@check_fsub
async def unban_user(event):
    if not await is_command_for_me(event):
        return
    if event.sender_id != OWNER_ID:
        return await event.reply("**üö´ ·¥è…¥ ü è ·¥õ ú·¥á  ô·¥è·¥õ ·¥è·¥°…¥·¥á Ä ·¥Ñ·¥Ä…¥ ·¥ús·¥á ·¥õ ú…™s ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ö.**")
    user_id = int(event.pattern_match.group(1))
    await banned_users_collection.delete_one({"user_id": user_id})
    await event.reply(f"**‚úÖ ·¥ús·¥á Ä {user_id}  ú·¥Äs  ô·¥á·¥á…¥ ·¥ú…¥·¥Ä ô…¥·¥á·¥Ö.**")

# Handler: /broadcast command to send a message to all users and groups
@app.on(events.NewMessage(pattern=r"^/(broadcast|gcast)(?:@\w+)?( .*)?$"))
@check_fsub
async def broadcast(event):
    if not await is_command_for_me(event):
        return
    if event.sender_id != OWNER_ID:
        return await event.reply("**üö´ ·¥è…¥ ü è ·¥õ ú·¥á  ô·¥è·¥õ ·¥è·¥°…¥·¥á Ä ·¥Ñ·¥Ä…¥ ·¥ús·¥á ·¥õ ú…™s ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ö.**")
    reply = event.reply_to_message if hasattr(event, 'reply_to_message') else None
    text = event.pattern_match.group(2)
    if not reply and not text:
        return await event.reply("**‚ùñ  Ä·¥á·¥ò ü è ·¥õ·¥è ·¥Ä ·¥ç·¥áss·¥Ä…¢·¥á ·¥è Ä ·¥ò Ä·¥è·¥†…™·¥Ö·¥á ·¥õ·¥áx·¥õ ·¥õ·¥è  ô Ä·¥è·¥Ä·¥Ö·¥Ñ·¥Äs·¥õ.**")
    progress_msg = await event.reply("**‚ùñ  ô Ä·¥è·¥Ä·¥Ö·¥Ñ·¥Äs·¥õ…™…¥…¢ ·¥ç·¥áss·¥Ä…¢·¥á ·¥ò ü·¥á·¥Äs·¥á ·¥°·¥Ä…™·¥õ...**")
    sent_groups, sent_users, failed, pinned = 0, 0, 0, 0
    users = await get_all_users()
    groups = await get_all_groups()
    recipients = groups + users
    for chat_id in recipients:
        try:
            if reply:
                msg = await event.reply_to_message.forward(chat_id)
            else:
                msg = await app.send_message(chat_id, text.strip())
            if isinstance(chat_id, int) and chat_id < 0:
                try:
                    await app.pin_message(chat_id, msg.id, notify=False)
                    pinned += 1
                except Exception:
                    pass
                sent_groups += 1
            else:
                sent_users += 1
            await asyncio.sleep(0.2)
        except Exception as e:
            logger.error(f"Failed to send broadcast to {chat_id}: {e}")
            failed += 1
    await progress_msg.edit(
        f"**‚úÖ  ô Ä·¥è·¥Ä·¥Ö·¥Ñ·¥Äs·¥õ ·¥Ñ·¥è·¥ç·¥ç Ä·¥á·¥õ·¥á·¥Ö.**\n\n"
        f"**üë• …¢ Ä·¥è·¥ú·¥òs s·¥á…¥·¥õ:** {sent_groups}\n"
        f"**üßë‚Äçüíª ·¥ús·¥á Äs s·¥á…¥·¥õ:** {sent_users}\n"
        f"**üìå ·¥ò…™…¥…¥·¥á·¥Ö:** {pinned}\n"
        f"**‚ùå “ì·¥Ä…™ ü·¥á·¥Ö:** {failed}"
    )

# Handler: Private messages to check for banned users
@app.on(events.NewMessage(func=lambda e: e.is_private))
async def check_ban(event):
    if await banned_users_collection.find_one({"user_id": event.sender_id}):
        return await event.reply("**üö´  è·¥è·¥ú ·¥Ä Ä·¥á  ô·¥Ä…¥…¥·¥á·¥Ö “ì Ä·¥è·¥ç ·¥ús…™…¥…¢ ·¥õ ú…™s  ô·¥è·¥õ.**")

@app.on(events.NewMessage)
async def handle_new_message(event):
    if event.is_private:
        await add_user(event.sender_id)  # Add user to database on any private message
    elif event.is_group:
        await add_group(event.chat_id)

# Update check_fsub_handler to include owner fsub check for groups
@app.on(events.NewMessage)
async def check_fsub_handler(event):
    if hasattr(event, '_fsub_checked'):
        return
        
    user_id = event.sender_id
    
    # Only check group's force sub, not owner's force sub for regular messages
    if event.is_group:
        chat_id = event.chat_id
        forcesub_data = await forcesub_collection.find_one({"chat_id": chat_id})
        if not forcesub_data or not forcesub_data.get("channels") or not forcesub_data.get("enabled", True):
            return

        is_member = True
        non_member_channel = None
        for channel in forcesub_data["channels"]:
            try:
                if isinstance(channel["id"], int):
                    await app(GetParticipantRequest(channel=channel["id"], participant=user_id))
                else:
                    channel_entity = await app.get_entity(channel["id"])
                    await app(GetParticipantRequest(channel=channel_entity, participant=user_id))
            except UserNotParticipantError:
                is_member = False
                non_member_channel = channel
                break
            except Exception as e:
                if "Could not find the input entity" in str(e):
                    logger.warning(f"Could not check user {user_id} in channel {channel['id']}: {e}")
                    is_member = False
                    non_member_channel = channel
                    break
                else:
                    logger.error(f"An error occurred while checking user participation: {e}")
                    return

        if not is_member:
            try:
                await event.delete()
            except Exception as e:
                logger.error(f"Could not delete message: {e}")

            try:
                # Create buttons with proper error handling
                buttons = []
                for c in forcesub_data['channels']:
                    try:
                        if c.get('link') and c.get('title'):
                            buttons.append([Button.url(f"‡πè ·¥ä·¥è…™…¥ {c['title']}", c['link'])])
                    except Exception as e:
                        logger.error(f"Error creating button for channel {c.get('id', 'unknown')}: {e}")
                
                # Only send message with buttons if we have valid buttons
                if buttons:
                    await event.reply(
                        f"**üëã  ú·¥á ü ü·¥è {event.sender.first_name},**\n\n"
                        f"** è·¥è·¥ú …¥·¥á·¥á·¥Ö ·¥õ·¥è ·¥ä·¥è…™…¥ ·¥õ ú·¥á “ì·¥è Ä·¥Ñ·¥á s·¥ú ôs·¥Ñ Ä…™·¥ò·¥õ…™·¥è…¥ ·¥Ñ ú·¥Ä…¥…¥·¥á ü(s) ·¥õ·¥è s·¥á…¥·¥Ö ·¥ç·¥áss·¥Ä…¢·¥ás …™…¥ ·¥õ ú…™s …¢ Ä·¥è·¥ú·¥ò:**\n\n"
                        f"{chr(10).join([f\"‡πè [{c['title']}]({c['link']})\" for c in forcesub_data['channels'] if c.get('title') and c.get('link')])}",
                        buttons=buttons
                    )
                else:
                    # Fallback message if no valid buttons could be created
                    await event.reply(
                        f"**üëã  ú·¥á ü ü·¥è {event.sender.first_name},**\n\n"
                        f"** è·¥è·¥ú …¥·¥á·¥á·¥Ö ·¥õ·¥è ·¥ä·¥è…™…¥ ·¥õ ú·¥á “ì·¥è Ä·¥Ñ·¥á s·¥ú ôs·¥Ñ Ä…™·¥ò·¥õ…™·¥è…¥ ·¥Ñ ú·¥Ä…¥…¥·¥á ü(s) ·¥õ·¥è s·¥á…¥·¥Ö ·¥ç·¥áss·¥Ä…¢·¥ás …™…¥ ·¥õ ú…™s …¢ Ä·¥è·¥ú·¥ò.**"
                    )
            except Exception as e:
                logger.error(f"An error occurred while sending the force sub message: {e}")
            return
            

async def startup_notification():
    try:
        # Initialize database counts
        total_users = len(await get_all_users())
        total_groups = len(await get_all_groups())
        
        await app.send_message(
            LOGGER_ID,
            "**‚úÖ  ô·¥è·¥õ  ú·¥Äs s·¥õ·¥Ä Ä·¥õ·¥á·¥Ö s·¥ú·¥Ñ·¥Ñ·¥áss“ì·¥ú Ä Ä è!**\n\n"
            f"** ô·¥è·¥õ …™…¥“ì·¥è:**\n"
            f"**‚û≤ ·¥è·¥°…¥·¥á Ä …™·¥Ö:** `{OWNER_ID}`\n"
            f"**‚û≤  ü·¥è…¢…¢·¥á Ä …™·¥Ö:** `{LOGGER_ID}`\n"
            f"**‚û≤ ·¥õ·¥è·¥õ·¥Ä ü ·¥ús·¥á Äs:** `{total_users}`\n"
            f"**‚û≤ ·¥õ·¥è·¥õ·¥Ä ü …¢ Ä·¥è·¥ú·¥òs:** `{total_groups}`"
        )
    except Exception as e:
        logger.error(f"Error sending startup notification: {e}")

async def main():
    await app.start(bot_token=BOT_TOKEN)
    await startup_notification()
    logger.info("Bot is running.")
    await app.run_until_disconnected()

if __name__ == "__main__":
    logger.info("Starting the bot...")
    try:
        asyncio.run(main())
    except (KeyboardInterrupt, SystemExit):
        logger.info("Bot stopped manually.")
    except Exception as e:
        logger.error(f"An unexpected error occurred: {e}")
